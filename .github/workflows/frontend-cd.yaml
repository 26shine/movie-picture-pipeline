name: Frontend Continuous Deployment

on:
  push:
    paths:
      - 'starter/frontend/**'
    branches:
      - main
  workflow_dispatch:

env: 
  WORKING_DIRECTORY: 'starter/frontend'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18

    - name: Cache Node Modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('$FRONTEND_PATH/package-lock.json') }}

    - name: Install dependencies
      working-directory: $WORKING_DIRECTORY
      run: npm install

    - name: Run lint
      working-directory: $WORKING_DIRECTORY
      run: npm run lint

    - name: Run test
      working-directory: $WORKING_DIRECTORY
      run: npm run test

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: set SHORT_GITHUB_SHA
      id: set-short-sha
      run: echo "SHORT_GITHUB_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

    - name: Build and upload to ECR
      uses: ./.github/actions/build-and-upload-ecr
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
        working_directory: ${{ env.WORKING_DIRECTORY }}
        ecr_repository: frontend
        image_tag: ${{ steps.set-short-sha.outputs.SHORT_GITHUB_SHA }}

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main # Pull new code after github action update image tag

    - name: Deploy to EKS
      uses: ./.github/actions/deploy-to-eks
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
        working_directory: ${{ env.WORKING_DIRECTORY }}
        cluster_name: cluster

